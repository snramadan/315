extern int fee (int, int);
extern int fi (int, int);
extern int foe (int, int);
extern int fum (int, int);

int funk (int a, int b, int c, int d, int e) {
  return fee(a, fi( b, foe( c, fum(d, e))));
}

/*********************************************************/
@ Callee Saved registers
@ saving r4-r7 in funk so funk doesn't break whoever calls funk()
 .global funk
funk:
      push {r4,r5,r6,lr}  @ callee save regs
      mov  r4, r0         @ save a
      mov  r5, r1         @ save b
      mov  r6, r2         @ save c

@fum setup and call
      ldr  r1, [sp, #16]  @ load fum arg2
      mov  r0, r3	  @ load fum arg1
      bl   fum

@foe setup and call
      mov  r1, r0  	 
      mov  r0, r6  	
      bl   foe

@fi setup and call
      mov  r1, r0  	
      mov  r0, r5  	
      bl   fi
 
@fee setup and call
      mov  r1, r0  	
      mov  r0, r4  	
      bl   fee

      pop  {r4,r5,r6,pc}  @ load fum arg2

@ Caller Saved Registers
@ saving r0-r3 in funk so fee,fi,foe,fum doesn't clobber the values 
 .global funk
funk:
      str lr, [sp, #-4]! @ pre-decrements the stack pointer

      @save args to stack
      sub sp, sp, #12
      str r0, [sp, #8]   @ save a
      str r1, [sp, #4]   @ save b
      str r2, [sp, #0]   @ save c
      @ or push {r?,r?,r?} 

      @fum setup and call
      ldr  r1, [sp, #16]	 @ load fum arg2
      mov  r0, r3		 @ load fum arg1
      bl  fum

      @foe setup and call
      mov r1, r0
      ldr r0, [sp, #0]
      bl  foe

      @fi setup and call
      mov r1, r0
      ldr r0, [sp, #4]
      bl fi

      @fee setup and call
      mov r1, r0
      ldr r0, [sp, #8]
      bl  fee

      @fee setup and call
      add sp, sp, #12   @ empty pop of a,b,c
      ldr pc, [sp], #4  @ post-increments the stack pointer

@which is the optimal implementation (for this example)???

